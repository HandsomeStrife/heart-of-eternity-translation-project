vs_2_0
// DX9 Vertex shader generated by NVIDIA Cg compiler
// cgc version 1.1.0003, build date Jul  7 2003  11:55:19
// command line args: -profile dxvs2
// nv30vp backend compiling 'main' program
def c13, 0, 1, 2, 4
def c14, 8, 0, 0, 0
//vendor NVIDIA Corporation
//version 1.0.02
//profile dxvs2
//program main
//semantic main.WorldViewProj
//semantic main.cModel
//semantic main.vEyePos
//semantic main.BumpScale
//semantic main.time
//semantic main.textureScale
//semantic main.bumpSpeed
//var float4 IN.Position : $vin.POSITION : POSITION : 0 : 1
//var float3 IN.Normal : $vin.NORMAL : NORMAL : 0 : 1
//var float2 IN.TexCoord : $vin.TEXCOORD0 : TEXCOORD0 : 0 : 1
//var float2 IN.TexCoord2 : $vin.TEXCOORD1 : TEXCOORD1 : 0 : 1
//var float3 IN.Tangent : $vin.TEXCOORD1 : TEXCOORD1 : 0 : 1
//var float3 IN.Binormal : $vin.TEXCOORD2 : TEXCOORD2 : 0 : 1
//var float4x4 WorldViewProj :  : c[0], 4 : 1 : 1
//var float4x4 cModel :  : c[4], 4 : 2 : 1
//var float4 vEyePos :  : c[8] : 3 : 1
//var float BumpScale :  : c[9] : 4 : 1
//var float time :  : c[10] : 5 : 1
//var float3 textureScale :  : c[11] : 6 : 1
//var float2 bumpSpeed :  : c[12] : 7 : 1
//var float4 Position : $vout.POSITION : POSITION : -1 : 1
//var float2 TexCoord : $vout.TEXCOORD0 : TEXCOORD0 : -1 : 1
//var float3 tangentSpaceTranspose0 : $vout.TEXCOORD1 : TEXCOORD1 : -1 : 1
//var float3 tangentSpaceTranspose1 : $vout.TEXCOORD2 : TEXCOORD2 : -1 : 1
//var float3 tangentSpaceTranspose2 : $vout.TEXCOORD3 : TEXCOORD3 : -1 : 1
//var float2 bumpCoord0 : $vout.TEXCOORD4 : TEXCOORD4 : -1 : 1
//var float2 bumpCoord1 : $vout.TEXCOORD5 : TEXCOORD5 : -1 : 1
//var float2 bumpCoord2 : $vout.TEXCOORD6 : TEXCOORD6 : -1 : 1
//var float3 eyeVector : $vout.TEXCOORD7 : TEXCOORD7 : -1 : 1
//const c[13] = 0 1 2 4
//const c[14] = 8 0 0 0
dcl_texcoord2 v4
dcl_texcoord1 v3
dcl_texcoord0 v2
dcl_normal v1
dcl_position v0
	mul r0, v0.y, c1
	mad r0, v0.x, c0, r0
	mad r0, v0.z, c2, r0
	mad oPos, v0.w, c3, r0
	mul r0.xyz, v3.y, c5.xyz
	mad r0.xyz, v3.y, c4.xyz, r0.xyz
	mad oT1.xyz, v3.y, c6.xyz, r0.xyz
	mul r0.xyz, v4.y, c5.xyz
	mad r0.xyz, v4.x, c4.xyz, r0.xyz
	mad oT2.xyz, v4.z, c6.xyz, r0.xyz
	mul r0.xyz, v1.y, c5.xyz
	mad r0.xyz, v1.x, c4.xyz, r0.xyz
	mad oT3.xyz, v1.z, c6.xyz, r0.xyz
	mul r0, v0.y, c5
	mad r0, v0.x, c4, r0
	mad r0, v0.z, c6, r0
	mad r0.xyz, v0.w, c7, r0
	add oT7.xyz, c8.xyz, -r0.xyz
	mul r1, v2.xy, c11.xy
	mov oT0.xy, r1
	mov r0.x, c10
	mul r0.zw, r0.x, c12.xxxy
	add oT4.xy, r1.xy, r0.zw
	mul r0.xy, r0.zw, c11.z
	mad oT5.xy, r1.xy, c13.z, -r0.xy
	mul r0.xy, r0.zw, c14.x
	mad oT6.xy, r1.xy, c13.w, r0.xy
// 27 instructions
// 2 temp registers
// End of program
